# -*- coding: utf-8 -*-
"""Untitled

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XbOu7cRyf38VpCeFMx8517Tvl9B48y89
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df=pd.read_csv('/content/Sales.csv')

df

df.head(5)

df.tail(5)

df.isnull().sum()

df.info()

df['Country'].unique()

df['State'].unique()

df.shape

df.describe()

df.columns

# Distribution of Customer Age
plt.figure(figsize=(10, 6))
sns.histplot(df['Customer_Age'], bins=30, kde=True)
plt.title('Distribution of Customer Age')
plt.xlabel('Customer Age')
plt.ylabel('Frequency')
plt.show()

# Age Group with most purchases
age_group_counts = df['Age_Group'].value_counts().reset_index()
age_group_counts.columns = ['Age_Group', 'Count']

plt.figure(figsize=(10, 6))
sns.barplot(x='Age_Group', y='Count', data=age_group_counts)
plt.title('Number of Purchases by Age Group')
plt.xlabel('Age Group')
plt.ylabel('Number of Purchases')
plt.show()

# Group by Customer_Gender and calculate sum of Revenue and Profit
gender_analysis = df.groupby('Customer_Gender')[['Revenue', 'Profit']].sum().reset_index()

# Visualize the difference in Revenue by Gender
plt.figure(figsize=(8, 5))
sns.barplot(x='Customer_Gender', y='Revenue', data=gender_analysis)
plt.title('Total Revenue by Customer Gender')
plt.xlabel('Customer Gender')
plt.ylabel('Total Revenue')
plt.show()

# Visualize the difference in Profit by Gender
plt.figure(figsize=(8, 5))
sns.barplot(x='Customer_Gender', y='Profit', data=gender_analysis)
plt.title('Total Profit by Customer Gender')
plt.xlabel('Customer Gender')
plt.ylabel('Total Profit')
plt.show()

# Group by Country and calculate sum of Revenue and Profit
country_analysis = df.groupby('Country')[['Revenue', 'Profit']].sum().reset_index()

# Sort by Revenue in descending order
country_revenue_sorted = country_analysis.sort_values(by='Revenue', ascending=False)

# Sort by Profit in descending order
country_profit_sorted = country_analysis.sort_values(by='Profit', ascending=False)

print("Country with highest Revenue:")
display(country_revenue_sorted.head(1))

print("\nCountry with highest Profit:")
display(country_profit_sorted.head(1))

# Group by State and calculate sum of Revenue and Profit
state_analysis = df.groupby('State')[['Revenue', 'Profit']].sum().reset_index()

# Sort by Revenue in descending order
state_revenue_sorted = state_analysis.sort_values(by='Revenue', ascending=False)

# Sort by Profit in descending order
state_profit_sorted = state_analysis.sort_values(by='Profit', ascending=False)

print("\nState with highest Revenue:")
display(state_revenue_sorted.head(1))

print("\nState with highest Profit:")
display(state_profit_sorted.head(1))

# Group by Product_Category and calculate sum of Revenue and Profit
category_analysis = df.groupby('Product_Category')[['Revenue', 'Profit']].sum().reset_index()

# Sort by Revenue in descending order
category_revenue_sorted = category_analysis.sort_values(by='Revenue', ascending=False)

print("Product Category with highest Revenue:")
display(category_revenue_sorted.head(1))

# Identify loss-making categories (Profit < 0)
loss_making_categories = category_analysis[category_analysis['Profit'] < 0]

if not loss_making_categories.empty:
    print("\nLoss-making Product Categories:")
    display(loss_making_categories)
else:
    print("\nNo loss-making Product Categories found.")

# Group by Sub_Category and calculate sum of Revenue and Profit
subcategory_analysis = df.groupby('Sub_Category')[['Revenue', 'Profit']].sum().reset_index()

# Sort by Revenue in descending order and display top 5
subcategory_revenue_sorted = subcategory_analysis.sort_values(by='Revenue', ascending=False)
print("Top 5 Sub-Categories by Revenue:")
display(subcategory_revenue_sorted.head())

# Sort by Profit in descending order and display top 5
subcategory_profit_sorted = subcategory_analysis.sort_values(by='Profit', ascending=False)
print("\nTop 5 Sub-Categories by Profit:")
display(subcategory_profit_sorted.head())

# Group by Product and calculate sum of Revenue and Profit
product_analysis = df.groupby('Product')[['Revenue', 'Profit']].sum().reset_index()

# Sort by Revenue in descending order and display top 10
product_revenue_sorted = product_analysis.sort_values(by='Revenue', ascending=False)
print("Top 10 Products by Revenue:")
display(product_revenue_sorted.head(10))

# Sort by Profit in descending order and display top 10
product_profit_sorted = product_analysis.sort_values(by='Profit', ascending=False)
print("\nTop 10 Products by Profit:")
display(product_profit_sorted.head(10))

# Identify products with the most losses (Profit < 0)
loss_making_products = product_analysis[product_analysis['Profit'] < 0].sort_values(by='Profit', ascending=True)

if not loss_making_products.empty:
    print("\nProducts with the most losses:")
    display(loss_making_products.head(10)) # Display top 10 loss-making products
else:
    print("\nNo loss-making products found.")

# Convert 'Date' column to datetime objects
df['Date'] = pd.to_datetime(df['Date'])

# Extract month and year
df['Month_Year'] = df['Date'].dt.to_period('M')

# Group by Month_Year and calculate sum of Revenue
monthly_revenue = df.groupby('Month_Year')['Revenue'].sum().reset_index()

# Convert 'Month_Year' back to datetime for plotting
monthly_revenue['Month_Year'] = monthly_revenue['Month_Year'].astype(str)

# Visualize the monthly revenue trend
plt.figure(figsize=(14, 7))
sns.lineplot(x='Month_Year', y='Revenue', data=monthly_revenue)
plt.title('Monthly Revenue Trend')
plt.xlabel('Month and Year')
plt.ylabel('Total Revenue')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Calculate the average Order Quantity
average_order_quantity = df['Order_Quantity'].mean()
print(f"The average Order Quantity is: {average_order_quantity:.2f}")

# Analyze the relationship between Order_Quantity and Profit
# Group by Order_Quantity and calculate the average Profit for each quantity
order_profit_analysis = df.groupby('Order_Quantity')['Profit'].mean().reset_index()

# Visualize the relationship
plt.figure(figsize=(10, 6))
sns.scatterplot(x='Order_Quantity', y='Profit', data=df)
plt.title('Profit vs. Order Quantity')
plt.xlabel('Order Quantity')
plt.ylabel('Profit')
plt.show()

# Or, display the average profit for different order quantities
print("\nAverage Profit by Order Quantity:")
display(order_profit_analysis)

# Compare Unit Price and Unit Cost
plt.figure(figsize=(10, 6))
sns.scatterplot(x='Unit_Cost', y='Unit_Price', data=df)
plt.title('Unit Price vs. Unit Cost')
plt.xlabel('Unit Cost')
plt.ylabel('Unit Price')
plt.show()

# Analyze the relationship between Unit Price and Profit
plt.figure(figsize=(10, 6))
sns.scatterplot(x='Unit_Price', y='Profit', data=df)
plt.title('Profit vs. Unit Price')
plt.xlabel('Unit Price')
plt.ylabel('Profit')
plt.show()

# Analyze the relationship between Unit Cost and Profit
plt.figure(figsize=(10, 6))
sns.scatterplot(x='Unit_Cost', y='Profit', data=df)
plt.title('Profit vs. Unit Cost')
plt.xlabel('Unit Cost')
plt.ylabel('Profit')
plt.show()

# Calculate overall Profit Margin
overall_profit_margin = (df['Revenue'].sum() - df['Cost'].sum()) / df['Revenue'].sum() * 100
print(f"Overall Profit Margin: {overall_profit_margin:.2f}%")

# Profit margin by Country
country_margin = df.groupby('Country').apply(lambda x: (x['Revenue'].sum() - x['Cost'].sum()) / x['Revenue'].sum() * 100).reset_index(name='Profit_Margin')
country_margin_sorted = country_margin.sort_values(by='Profit_Margin', ascending=False)
print("\nCountry with highest Profit Margin:")
display(country_margin_sorted.head(1))

# Profit margin by State
state_margin = df.groupby('State').apply(lambda x: (x['Revenue'].sum() - x['Cost'].sum()) / x['Revenue'].sum() * 100).reset_index(name='Profit_Margin')
state_margin_sorted = state_margin.sort_values(by='Profit_Margin', ascending=False)
print("\nState with highest Profit Margin:")
display(state_margin_sorted.head(1))

# Profit margin by Product Category
category_margin = df.groupby('Product_Category').apply(lambda x: (x['Revenue'].sum() - x['Cost'].sum()) / x['Revenue'].sum() * 100).reset_index(name='Profit_Margin')
category_margin_sorted = category_margin.sort_values(by='Profit_Margin', ascending=False)
print("\nProduct Category with highest Profit Margin:")
display(category_margin_sorted.head(1))

# Profit margin by Product
product_margin = df.groupby('Product').apply(lambda x: (x['Revenue'].sum() - x['Cost'].sum()) / x['Revenue'].sum() * 100).reset_index(name='Profit_Margin')
product_margin_sorted = product_margin.sort_values(by='Profit_Margin', ascending=False)
print("\nProduct with highest Profit Margin:")
display(product_margin_sorted.head(1))

df['Product_Category'].unique()

df['Sub_Category'].unique()

# Group by Day and calculate the number of orders and sum of Revenue
daily_analysis = df.groupby('Day').agg(
    Total_Orders=('Order_Quantity', 'count'),
    Total_Revenue=('Revenue', 'sum')
).reset_index()

# Sort by Total_Orders in descending order
daily_orders_sorted = daily_analysis.sort_values(by='Total_Orders', ascending=False)
print("Day with highest number of orders:")
display(daily_orders_sorted.head(1))

# Sort by Total_Revenue in descending order
daily_revenue_sorted = daily_analysis.sort_values(by='Total_Revenue', ascending=False)
print("\nDay with highest Revenue:")
display(daily_revenue_sorted.head(1))

# Calculate total profit per Product
product_profit = df.groupby('Product')['Profit'].sum().reset_index()

# Calculate total profit per Sub-Category
subcategory_profit = df.groupby('Sub_Category')['Profit'].sum().reset_index()

print("Total Profit per Product:")
display(product_profit.head())

print("\nTotal Profit per Sub-Category:")
display(subcategory_profit.head())

# Analyze daily sales trends
# Extract day of the week (0 for Monday, 6 for Sunday)
df['Day_of_Week'] = df['Date'].dt.dayofweek

# Group by Day of Week and calculate sum of Revenue
daily_weekday_analysis = df.groupby('Day_of_Week')['Revenue'].sum().reset_index()

# Map day of week numbers to names for better readability
days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
daily_weekday_analysis['Day_of_Week'] = daily_weekday_analysis['Day_of_Week'].map(lambda x: days[x])

# Visualize the revenue by day of the week
plt.figure(figsize=(10, 6))
sns.barplot(x='Day_of_Week', y='Revenue', data=daily_weekday_analysis, order=days)
plt.title('Total Revenue by Day of the Week')
plt.xlabel('Day of the Week')
plt.ylabel('Total Revenue')
plt.show()

# You can also analyze trends around year-end by filtering data for December and January
# However, without specific holiday dates in the data, a detailed holiday analysis is not possible.

# Group by Country and State and calculate total Profit
country_state_profit = df.groupby(['Country', 'State'])['Profit'].sum().reset_index()

# Function to find best and worst performing states within each country
def find_best_worst_states(df_country):
    best_state = df_country.loc[df_country['Profit'].idxmax()]
    worst_state = df_country.loc[df_country['Profit'].idxmin()]
    return best_state, worst_state

# Apply the function to each country group
best_worst_states_per_country = country_state_profit.groupby('Country').apply(find_best_worst_states)

print("Best and Worst Performing States within each Country (by Profit):")
for country, (best_state, worst_state) in best_worst_states_per_country.items():
    print(f"\nCountry: {country}")
    print(f"  Best Performing State: {best_state['State']} (Profit: {best_state['Profit']:.2f})")
    print(f"  Worst Performing State: {worst_state['State']} (Profit: {worst_state['Profit']:.2f})")

# Group by Order_Quantity and calculate total Revenue and average Profit Margin
order_quantity_analysis = df.groupby('Order_Quantity').agg(
    Total_Revenue=('Revenue', 'sum'),
    Average_Profit_Margin=('Profit', lambda x: (x.sum() / df.loc[x.index, 'Revenue'].sum()) * 100)
).reset_index()

print("Revenue and Average Profit Margin by Order Quantity:")
display(order_quantity_analysis)

# Visualize the relationship between Order Quantity and Total Revenue
plt.figure(figsize=(10, 6))
sns.lineplot(x='Order_Quantity', y='Total_Revenue', data=order_quantity_analysis)
plt.title('Total Revenue by Order Quantity')
plt.xlabel('Order Quantity')
plt.ylabel('Total Revenue')
plt.show()

# Visualize the relationship between Order Quantity and Average Profit Margin
plt.figure(figsize=(10, 6))
sns.lineplot(x='Order_Quantity', y='Average_Profit_Margin', data=order_quantity_analysis)
plt.title('Average Profit Margin by Order Quantity')
plt.xlabel('Order Quantity')
plt.ylabel('Average Profit Margin (%)')
plt.show()

# Group by Age_Group and Customer_Gender and calculate sum of Revenue
age_gender_revenue = df.groupby(['Age_Group', 'Customer_Gender'])['Revenue'].sum().reset_index()

# Sort by Revenue in descending order
age_gender_revenue_sorted = age_gender_revenue.sort_values(by='Revenue', ascending=False)

print("Age Group + Gender combination with highest Revenue:")
display(age_gender_revenue_sorted.head(1))

# Distribution of Unit Cost
plt.figure(figsize=(10, 6))
sns.histplot(df['Unit_Cost'], bins=30, kde=True)
plt.title('Distribution of Unit Cost')
plt.xlabel('Unit Cost')
plt.ylabel('Frequency')
plt.show()